# -*- mode: qore; indent-tabs-mode: nil -*-

/*  Document.qm Copyright 2017 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

%require-types
%enable-all-warnings
%new-style
%strict-args

%disable-warning unreferenced-variable

module Document {
    version = "0.1";
    desc    = "Document class";
    author  = "Ondrej Musil <ondrej.musil@qoretechnologies.com>";
    url     = "https://github.com/qorelanguage/qls";
}

%requires astparser

#! Represents one open document (source file).
public class Document {
    private {
        #! The document's URI.
        string uri;

        #! The document's name (without path).
        string docName;

        #! The document's language identifier.
        string languageId;

        #! The version number of this document (it will strictly increase after each change, including undo/redo).
        int version;

        #! The content of the opened text document.
        *string text;

        #! AST parser.
        astparser::AstParser parser;

        #! AST tree containing all the syntax info.
        *astparser::AstTree tree;

        #! Whether the document has been parsed successfully by the program.
        bool parseOk;

        #! Parse error description (in case a parse error occured).
        *string parseError;
    }

    constructor(string n_uri, string n_text, string n_languageId, int n_version) {
        uri = n_uri;
        docName = basename(uri);
        text = n_text;
        languageId = n_languageId;
        version = n_version;

        parseText();
    }

    constructor(string n_uri) {
        uri = n_uri;
        docName = basename(uri);
        languageId = "qore";
        version = 0;

        parseFile();
    }

    private:internal parseInit() {
        delete parseError;
        delete tree;
        parseOk = True;
        parser = new astparser::AstParser();
    }

    private:internal handleParseErrors(int rc) {
        if (rc) {
            parseOk = False;
            parseError = sprintf("Error parsing text document '%s' - return code: %d\n\n", uri, rc);
            if (parser.getErrorCount()) {
                parseError += "Errors:\n\n";
                *list diagnostics = parser.getDiagnostics();
                int i = 1;
                foreach hash diag in (diagnostics) {
                    parseError += sprintf("%d) %s:%d:%d: %s\n\n", i++, docName,
                        diag.range.start.line,
                        diag.range.start.character,
                        diag.message);
                }
            }
        }
    }

    #! Parse document from a file.
    private:internal parseFile() {
        parseInit();
        string filePath = uri.substr(7); # trim "file://"
        tree = parser.parseFile(filePath);
        if (!tree) {
            handleParseErrors(1);
            stderr.printf(parseError);
        }
    }

    #! Parse the text of the document.
    private:internal parseText() {
        parseInit();
        tree = parser.parseString(text);
        if (!tree) {
            handleParseErrors(1);
            stderr.printf(parseError);
        }
    }

    string getUri() { return uri; }
    string getLanguageId() { return languageId; }
    int getVersion() { return version; }
    string getText() { return text; }

    #! Get count of parse errors.
    int getParseErrorCount() {
        return parser.getErrorCount();
    }

    #! Get parse diagnostics (errors).
    *list getDiagnostics() {
        return parser.getDiagnostics();
    }

    #! The document has changed.
    didChange(hash changes) {
        # Modify document text.
        # Using whole document sync here.
        text = changes.text;

        # Re-parse the document.
        parseText();
    }
    
    changeVersion(int n_version) {
        version = n_version;
    }

    #! Return info about symbol at the passed position.
    hash hover(hash Position) {
        int line = Position.line;
        int char = Position.character;
        if (!parseOk) {
            return {
                "contents": parseError,
                "range": {
                    "start": {
                        "line": line,
                        "character": char
                    },
                    "end": {
                        "line": line,
                        "character": char+1
                    }
                }
            };
        }

        AstTreeSearcher searcher();
        *hash results;
        if (tree)
            results = searcher.hover(tree, Position.line, Position.character);
        if (!results)
            return {
                "contents": "no results",
                "range": {
                    "start": {
                        "line": line,
                        "character": char
                    },
                    "end": {
                        "line": line,
                        "character": char+1
                    }
                }
            };
        return results;
    }

    #! Find info about symbol at the passed position.
    *hash findSymbolInfo(hash Position) {
        AstTreeSearcher searcher();
        if (tree)
            return searcher.findSymbolInfo(tree, Position.line, Position.character);
        return NOTHING;
    }

    #! Return hover info about symbol at the passed position.
    *hash hoverInfo(int kind, hash Position) {
        int line = Position.line;
        int char = Position.character;
        if (!parseOk) {
            return {
                "contents": parseError,
                "range": {
                    "start": {
                        "line": line,
                        "character": char
                    },
                    "end": {
                        "line": line,
                        "character": char+1
                    }
                }
            };
        }

        AstTreeSearcher searcher();
        if (tree)
            return searcher.hoverInfo(tree, kind, line, char);
        return NOTHING;
    }

    #! Find references of the symbol at the passed position.
    *list findReferences(hash Position, bool includeDecl) {
        int line = Position.line;
        int char = Position.character;
        AstTreeSearcher searcher();
        if (tree)
            return searcher.findReferences(tree, uri, line, char, includeDecl);
        return NOTHING;
    }

    #! Find all symbols.
    /**
        @param bareNames whether to return bare symbol names (without namespace and class prefixes)
        @return list of symbols
    */
    *list findSymbols(bool bareNames = False) {
        AstTreeSearcher searcher();
        if (tree)
            return searcher.findSymbols(tree, uri, bareNames);
        return NOTHING;
    }

    #! Find matching symbols.
    /**
        @param query search query
        @param exactMatch whether to only find exact matches
        @return list of symbols
    */
    list findMatchingSymbols(string query, bool exactMatch = False) {
        AstTreeSearcher searcher();
        if (tree) {
            *list symbols = searcher.findMatchingSymbols(tree, uri, query, exactMatch);
            return symbols ?? list();
        }
        return list();
    }
}
