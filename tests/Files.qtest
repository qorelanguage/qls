#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

/*  Files.qtest Copyright 2017 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

%new-style

%requires QUnit
%include ../qlib/Files.q

%exec-class Main

class Main inherits QUnit::Test
{
    constructor() : QUnit::Test("Files module test", "1.0")
    {
        addTestCase("is_valid_qore_file test", \testIsValidQoreFile());
        addTestCase("find_std_modules test", \testFindStdModules());
        addTestCase("find_qore_files test", \testFindQoreFiles());

        set_return_value(main());
    }

    testIsValidQoreFile()
    {
        hash files = (
                "invalid_qore_file.txt" : ("ret" : False, "msg" : "invalid by an extension"),
                "valid_qore_file"       : ("ret" : True, "msg" : "valid by magic header"),
                "valid_qore_file.q"     : ("ret" : True, "msg" : "valid by an extension"),
            );

        HashIterator it(files);
        while (it.next()) {
            bool ret = Files::is_valid_qore_file(it.getKey());
            assertEq(it.getValue().ret, ret, it.getValue().msg);
        }
    }

    testFindStdModules()
    {
        list files = Files::find_std_modules();
        # let's guess there is at least one module and all files have *.qm mask
        bool success = False;

        if (files.size()) {
            ListIterator it(files);
            while (it.next()) {
                success = success || Files::is_valid_qore_file(it.getValue());
            }
        }

        assertEq(True, success, "find_std_modules should find at least one file in the path");
    }

    testFindQoreFiles()
    {
        string path = "../qlib";
        list files = Files::find_qore_files(path);

        Dir d();
        d.chdir(path);
        list refs = list();
        ListIterator it  = d.listFiles().iterator();
        while (it.next()) {
            push refs, sprintf("%s%s%s", path, DirSep, it.getValue());
        }

        assertEq(refs, files, "find_qore_files in ../qlib must find exact list of files");
    }

} # class Main
